firstEvent: bonefish.boot

singleEvents:
    bonefish.boot:
        - \AValnar\EventStrap\Listener\SimpleClassCreator(
            class = Doctrine\Common\Cache\ApcCache
            event = bonefish.cache.created
        )
        - \Bonefish\Bootstrap\TracyListener(
            mode = false
            event = bonefish.tracy.created
        )
    bonefish.cache.created:
        - \Bonefish\Bootstrap\AnnotationReaderFactoryListener(
            event = bonefish.annotationReader.created
        )
    bonefish.reflectionService.created:
        - \AValnar\EventStrap\Listener\DependencyClassCreator(
            class = Bonefish\Injection\Container\Container
            event = bonefish.container.created
        )
    bonefish.container.created:
        - \Bonefish\Bootstrap\ContainerSetupListener(
            config = /home/aschmidt/git/Bonefish/configuration/interfaces.neon
            event = bonefish.container.setup
        )

    bonefish.container.setup:
        - \Bonefish\Bootstrap\RequestListener(
            event = bonefish.request.created
        )
        - \Bonefish\Bootstrap\ContainerObjectCreator(
            class = \Bonefish\Router\Request\RequestHandlerInterface
            event = bonefish.requestHandler.created
        )

multiEvents:
    - AValnar\EventStrap\MultiListener(
        events = [bonefish.cache.created, bonefish.annotationReader.created]
        listener = \AValnar\EventStrap\Listener\DependencyClassCreator(
            class = Bonefish\Reflection\ReflectionService
            event = bonefish.reflectionService.created
        )
        state = 2
    )
    - AValnar\EventStrap\MultiListener(
        events = [bonefish.request.created, bonefish.requestHandler.created]
        listener = \Bonefish\Bootstrap\RequestHandlerListener(
            beforeEvent = bonefish.request.beforeHandle
            event = bonefish.request.afterHandle
        )
        state = 2
    )